function [Y,Xf,Af] = trainscg4__2__118-Dec-2021(X,~,~)
%TRAINSCG4__2__118-DEC-2021 neural network simulation function.
%
% Auto-generated by MATLAB, 18-Dec-2021 18:24:12.
% 
% [Y] = trainscg4__2__118-Dec-2021(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.50826608;0.75224505;0.25240559;0.7524299;0.250911845];
x1_step1.gain = [0.33388061039706;0.400593992760585;0.364089031557419;0.400510983928626;0.363726553603256];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.926859692707769689;0.25706864853704547436;-0.69106723987318885438;-0.55282126459177372002];
IW1_1 = [-0.56947906602496833894 -0.5810318474219238194 -0.77992747863824274379 0.12955456890623473498 -1.016631747387011675;-1.8460367352385231854 0.9829133650693910873 -0.74996227399878889752 -1.1519560262430696973 0.9440475209121418354;-0.50978713032152034312 1.2264338429572514411 2.7611589271001975021 -1.278420202373417025 0.52092090164289195364;0.02971699042699199253 -0.044360129837184160417 -0.18443044432807648159 -0.0040942877655142512205 1.9279291647709102531];

% Layer 2
b2 = [-0.85481655200747841405;1.7954981781692083143];
LW2_1 = [0.70968501111583592866 -0.33877906226810933221 0.42055406251482319036 0.44762161249492160575;1.1212983804749037109 1.3946497496246008652 -0.11253830464773280362 0.89963871305485887397];

% Layer 3
b3 = -0.18948472957764414537;
LW3_2 = [1.1623033893443259768 0.68878987435757832447];

% Layer 4
b4 = [0.069465746984007079035;0.088041363079083861942];
LW4_3 = [0.023930262299731080988;1.586235048220604682];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.585808911511449;0.568900823163935];
y1_step1.xoffset = [-1.78720142;-6.54522631];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = tansig_apply(repmat(b3,1,Q) + LW3_2*a2);
    
    % Layer 4
    a4 = repmat(b4,1,Q) + LW4_3*a3;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a4,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(4,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
