function [Y,Xf,Af] = trainbr518-Dec-2021(X,~,~)
%TRAINBR518-DEC-2021 neural network simulation function.
%
% Auto-generated by MATLAB, 18-Dec-2021 18:24:07.
% 
% [Y] = trainbr518-Dec-2021(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.50826608;0.75224505;0.25240559;0.7524299;0.250911845];
x1_step1.gain = [0.33388061039706;0.400593992760585;0.364089031557419;0.400510983928626;0.363726553603256];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.28207783575119249608;0.68477623238886498047;0.26898418750301511526;-0.005752813052755734527;-0.049609071254403856732];
IW1_1 = [-1.5690807048209018948 0.34458912449859196991 -0.24810080942854442765 -0.22151368961255968326 -0.60763220754485025576;1.5053444054050202361 0.15169342890297057846 -0.79922783406403596906 -0.65504087365416652222 -0.27649587386932877875;-0.68905323962615072642 1.7418918508683325364 -2.3772243282241829476 -0.99088340875263258845 0.74986528565469368068;0.25802233943523589232 0.92849940877869951983 -0.94634974116552705858 -1.6949555637762665494 0.80177894814654748767;-1.468710527745562322 0.5538427520072911614 0.1260112219567769698 0.2944516133167020544 -0.53305216627541129881];

% Layer 2
b2 = [0.076483788113565778777;0.3617978711656711921];
LW2_1 = [-1.5725753489226441673 0.76551790436903899284 0.031358504988199704944 -0.098730555331793881657 1.8299301662193157014;-1.2041225423297994279 -0.11852200736015086613 -0.61900639470639851059 0.98998007401876664257 1.4618921330641903022];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.585808911511449;0.568900823163935];
y1_step1.xoffset = [-1.78720142;-6.54522631];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
