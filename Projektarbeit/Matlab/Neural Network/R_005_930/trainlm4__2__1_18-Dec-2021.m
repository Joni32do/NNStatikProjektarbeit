function [Y,Xf,Af] = trainlm4__2__1_18-Dec-2021(X,~,~)
%TRAINLM4__2__1_18-DEC-2021 neural network simulation function.
%
% Auto-generated by MATLAB, 18-Dec-2021 18:44:53.
% 
% [Y] = trainlm4__2__1_18-Dec-2021(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.50826608;0.75224505;0.25240559;0.7524299;0.250911845];
x1_step1.gain = [0.33388061039706;0.400593992760585;0.364089031557419;0.400510983928626;0.363726553603256];
x1_step1.ymin = -1;

% Layer 1
b1 = [5.3160020863410792913;-3.6573153000981948324;-0.14094059412685078225;-0.3184620808803438341];
IW1_1 = [-2.129448393517436422 1.349153380224436205 -4.9799546426407195199 -1.3976614772808688691 0.55061742532529422967;1.8864572544676132537 5.1486390401562136532 1.2741575526459258949 -0.27671728161943970337 -0.49840617300780298837;1.2077609159777540349 -0.83658011958520095419 0.30212460755154285641 1.0659377170339052743 -0.92766220529752374535;0.24084837867152644741 -0.34578630119282122157 -0.072089065718697387108 0.35412477083059129557 -0.350830086070374636];

% Layer 2
b2 = [-2.887848437107685573;-0.41991644517453208252];
LW2_1 = [0.98586072502341048907 -0.69886361088414716836 1.3912710960648748681 -3.9456693668507853978;3.2350313655164066873 -1.4115139360420059234 -1.0559909285340081109 3.4605898764923725963];

% Layer 3
b3 = -1.6595991664748228622;
LW3_2 = [-2.6684334901052504385 1.0266169484630873754];

% Layer 4
b4 = [0.070896962852255093757;0.13499581913362232455];
LW4_3 = [0.00037069901229759398293;-0.65243976768654332599];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.585808911511449;0.568900823163935];
y1_step1.xoffset = [-1.78720142;-6.54522631];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = tansig_apply(repmat(b3,1,Q) + LW3_2*a2);
    
    % Layer 4
    a4 = repmat(b4,1,Q) + LW4_3*a3;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a4,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(4,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
