function [Y,Xf,Af] = trainlm5_18-Dec-2021(X,~,~)
%TRAINLM5_18-DEC-2021 neural network simulation function.
%
% Auto-generated by MATLAB, 18-Dec-2021 18:45:32.
% 
% [Y] = trainlm5_18-Dec-2021(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.50826608;0.75224505;0.25240559;0.7524299;0.250911845];
x1_step1.gain = [0.33388061039706;0.400593992760585;0.364089031557419;0.400510983928626;0.363726553603256];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.2929143347675211562;-0.22557227259337897518;-0.39534474635633826134;-0.74547555435935497492;-3.4696402177549412471];
IW1_1 = [0.82398860121635286724 0.74670528768552879573 0.74976834694395855241 1.4023587644104558159 0.90102850304286685734;-0.95826407808973235181 -0.071319058127102014089 0.33367193876757855753 0.24118126923545130103 0.65180804564902017351;1.8697066614957851272 1.5429766269023090786 1.6511334514982605182 -1.6170452625860691764 3.0900125534716447184;-2.3875548971035112089 0.1836389893228903003 -1.2956337102480643964 -0.87373500564930850487 1.4399307309941378197;-1.1858042805627324601 2.0574073968265129686 -3.7267336288220196394 -0.70563436054292616451 0.59186926487699276223];

% Layer 2
b2 = [-0.57804772492973977016;0.54277276200513047133];
LW2_1 = [0.88482293336401585115 -0.57145478493583234947 -0.076859372721685664809 -0.029715440752863163387 0.16096655785821170626;-0.21829501105190118881 0.81829026091106038532 0.56752592019430048165 -0.68724148823048680779 0.44591554673766492511];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.585808911511449;0.568900823163935];
y1_step1.xoffset = [-1.78720142;-6.54522631];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
