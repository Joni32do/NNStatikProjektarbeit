function [Y,Xf,Af] = simpleNN(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 10-Dec-2021 17:43:48.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx5 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.50826608;0.75224505;0.25240559;0.7524299;0.250911845];
x1_step1.gain = [0.33388061039706;0.400593992760585;0.364089031557419;0.400510983928626;0.363726553603256];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.5104574302101170247;-2.2736456434496874479;0.2454603661780459245;0.33155625005215177969;3.476506311113920944;0.74673682821418119193;0.022002251686870449854;0.32745631768287636332;-0.51569084518762420277;1.835115006249155023];
IW1_1 = [-3.1775117090928257646 1.8075927503069957325 -0.19510855690576719979 -0.082843478241460197231 -1.3683686890110362544;1.3269610692761675264 -0.32063181275612334664 2.0631431947512695046 1.3774374272718357126 -1.7754971498796370266;1.5161912891555313632 -1.3891136743239833606 -4.1674697345123119518 0.51770073172055353083 0.95317825398859157282;-0.32902868090880649232 -1.7209127913271133892 0.34967171278341402374 -0.98428720427987570485 -1.2268076977538899808;-1.0642172501704278975 0.39103423027486416963 -1.2870834589593784791 -2.7905208045242111403 3.6535289496291092348;2.5023953079325504945 0.48264118535640115892 -1.1701235882131937327 -2.5719394355031188759 -1.5058457277840118227;0.51388236448144819501 0.045719242293815270939 0.46614313590822753497 0.1441520399310659839 0.24735017642995127396;0.099423925454565437176 0.0049952020388618839988 1.4685991554918735869 1.714296007292309687 0.50875217206994094443;0.43285137549300300996 0.86407915598173068439 0.27156687063188711395 1.0212071976077228275 1.7594070425155525772;0.59880047508362055364 -1.1391763384102975287 2.1236844596575541466 -0.12386103168731628366 0.060304621057770679826];

% Layer 2
b2 = [0.41712972207458909324;0.95394972967813829179];
LW2_1 = [-0.31988301683771552808 -0.52346789907787816265 -0.021052696479033128352 -0.47167386219938906011 -0.49130837845755620519 -0.003323801013250890328 1.2680304110349107649 0.2025110592244659391 -0.66228081726448273514 -0.57093645700232542595;-0.27544456547168505445 -0.65321475235192205666 -0.56730394845543585802 0.80648355091498236114 -0.55007617487471194284 -0.61620535364772988096 1.5970308678750144704 -0.71795451276188337886 0.70874038377105441633 -0.74160243046824270152];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.585808911511449;0.568900823163935];
y1_step1.xoffset = [-1.78720142;-6.54522631];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
