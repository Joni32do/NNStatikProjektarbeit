function [Y,Xf,Af] = trainlm4__2_18-Dec-2021(X,~,~)
%TRAINLM4__2_18-DEC-2021 neural network simulation function.
%
% Auto-generated by MATLAB, 18-Dec-2021 18:44:17.
% 
% [Y] = trainlm4__2_18-Dec-2021(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.50826608;0.75224505;0.25240559;0.7524299;0.250911845];
x1_step1.gain = [0.33388061039706;0.400593992760585;0.364089031557419;0.400510983928626;0.363726553603256];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.048833287651958864894;-2.416786924602030151;0.12298852422520421823;1.9748745122923061501];
IW1_1 = [-0.33781769196071670391 -1.0145046098370975596 -0.10838765986495282889 -0.010411633666553633468 0.55965491626473007347;4.0680635175238393231 -2.0366413413137016697 1.0138641165122590504 0.45359444150284800035 0.76606590878918801035;0.70285797689541262834 2.4596875822993764515 0.3282066075191518717 -0.1234777660461689186 -0.87669290332173133162;1.2070193600441001536 1.017843569606985854 0.89910903228226424222 2.7805547760387523404 2.6189852647026827803];

% Layer 2
b2 = [-0.21102446096191213032;-0.63628641590670009798];
LW2_1 = [-0.2605283504898557867 -0.23508488710064473493 -0.32450274693136932358 -0.14433435702388711097;-4.428570726593441087 -0.47306383094035497905 -3.267624491547028498 0.17690713336320315618];

% Layer 3
b3 = [-0.31967972707431213664;-0.10419593072096521025];
LW3_2 = [-2.1949669208546582766 0.52878538599993585301;0.13405805615982788193 -0.88488350704319618245];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.585808911511449;0.568900823163935];
y1_step1.xoffset = [-1.78720142;-6.54522631];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
