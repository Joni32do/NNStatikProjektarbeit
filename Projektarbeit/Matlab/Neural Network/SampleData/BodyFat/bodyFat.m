function [Y,Xf,Af] = bodyFat(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 27-Nov-2021 13:47:43.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 13xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [22;118.5;29.5;31.1;79.3;69.4;85;47.2;33;19.1;24.8;21;15.8];
x1_step1.gain = [0.0338983050847458;0.00817494379726139;0.0414507772020725;0.099502487562189;0.0351493848857645;0.0254129606099111;0.0318979266347687;0.0498753117206983;0.124223602484472;0.135135135135135;0.099009900990099;0.143884892086331;0.357142857142857];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.3134758746980925714;-1.3901410725376972533;-0.68542203222608455437;0.97947739210862172499;-0.22341154573428465002;0.84330204628668781197;-1.4198149353561260178;1.9015907640041416204];
IW1_1 = [0.52145378340065562384 -0.52329627227781272403 1.0541664642948458397 -0.75998886412446187144 -0.79159638785626851298 -0.47117353268678863198 0.95922313489708843637 0.048173894896849547842 -0.0030442520878100620685 -0.96657581549758264661 -0.11987032317820515981 -1.8272660073311646212 0.72224932938403596516;-0.26125357120894177054 0.099751749500462477682 -0.51555397511505274277 -0.030436669277267475869 0.35087933168879265056 -0.9567150226597525009 -0.41781958507340510867 0.98449528194598556752 -0.72053103108624316775 -0.15287054902717067684 1.8571559734525564522 0.71895592777545447305 0.27493466598036009341;-0.66646410950145240637 -0.02710979582172290403 0.30150137341127913881 0.020714002927612787386 -0.53502739635487150949 0.063663880198385591758 0.45820017212400104833 1.4209550664192640568 -1.7094267179708739768 -0.23450740465427877268 1.0353995978285266411 1.1490356844454168161 -1.2108053945507004645;-0.02941596358183570098 0.8851780364858660155 -1.2845740395632392339 -0.64822303793664182159 0.1792887733107722259 0.37308785300505020732 -0.17199389667211278931 -0.27699781400681622312 0.10089983819524171726 -0.47605579867545066985 0.04180088621930334869 0.022409101941509523837 1.0225374685992982826;0.66650542850015559448 -0.032223817150252950792 -0.7530995428147386761 0.57759606464211754595 -0.4479469472462883628 0.74097644437762744118 0.82990133239037178203 0.16090385091390060901 -0.61886261457133684427 1.1402828694921331998 -0.065925929395056911964 0.20370554505675805834 0.23198883918085011491;0.1860740643323937904 0.081452605939568809013 0.46997697355463374791 0.53847460839594374349 0.35075175884458620335 1.365364498944718008 -0.88729890036774672346 0.083674180515656615409 0.49623420720794386707 0.80446547095363662994 0.038789043460321873114 -0.053133149760491341085 -0.70850388035769662487;-0.96827444929441830457 -0.4177286286519852343 0.86705279029546511449 -0.28512120387072414918 0.95971490198350672962 -0.023545598208446344435 0.74734690359230104839 0.1681126386441978704 -0.79007270752939084968 0.016088706809987626811 0.59570619182105677414 0.10494322809895381687 0.27804957758385079325;1.0081404726866427524 -1.0988262774031036795 -0.33038283843319765642 -0.43611756331491324801 -0.27749856415909396334 -0.15101799950082916979 1.1720570402247298958 -0.080440289743787724008 0.18550267204386458597 -1.5163045847050735659 0.16546505767082403393 -0.38747415517834199461 -0.20984947536518949729];

% Layer 2
b2 = -0.4579914720709639675;
LW2_1 = [0.39413576845945991201 -0.82416545325990209214 0.54763940897668594854 0.67604875517355278447 0.40354744797461539196 0.8000980740092334953 -0.32819063167033790673 0.03366851059581800476];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0421052631578947;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
